geom_abline(slope = 1, intercept = 0, colour = 'red') +
xlab('Normalized score (ara = 0.2)') + ylab('Normalized score (ara = 0.4)')
p1
# New version indicating the key residues
p1 <- paired_samples %>%
ggplot(aes(x = mean_FC_0.2, y = mean_FC_0.4, colour = Ligand, alpha = Ligand)) +
geom_point() +
scale_alpha_manual(values = c(1, 1, 0.2)) +
geom_abline(slope = 1, intercept = 0, colour = 'red') +
xlab('Normalized score (ara = 0.2)') + ylab('Normalized score (ara = 0.4)')
p1
ggsave(device = cairo_pdf, plot = p1, width = 10, height = 7, dpi = 500,
filename = '/media/axelle/afe8c733-963d-4db8-a2ee-551a0b73c9d7/Angel/PhD_projects/R67_DMS_December2020/Analysis/Figures/Replicate_correlations/log2FC/Average_3reps/ara0.2_ara0.4_normScores_comparison_avg3reps_keyres.pdf')
# Load libraries
library(tidyverse)
library(magrittr)
library(ggplot2)
library(cowplot)
library(Cairo)
theme_set(theme_cowplot())
# Prepare a table of amino acid names
aa_three2one <- data.frame(cbind(c('A', 'R', 'D', 'N', 'C',
'E', 'Q', 'G', 'H', 'I',
'L', 'K', 'M', 'F', 'P',
'S', 'T', 'W', 'Y', 'V'),
c('ALA', 'ARG', 'ASN', 'ASP', 'CYS',
'GLU', 'GLN', 'GLY', 'HIS', 'ILE',
'LEU', 'LYS', 'MET', 'PHE', 'PRO',
'SER', 'THR', 'TRP', 'TYR', 'VAL')))
colnames(aa_three2one) <- c('One-letter', 'Three-letter')
## Stability ddGs
HET_stab<-read_delim('../Data/Mutagenesis_results/006_gathered_data/2rk1_monomer_HM/stability_monomer_ddGs_tabs.txt',
delim='\t', col_names = c('Chain', 'WT_res', 'Mut_res', 'Mean_ddG_stab_HET', 'Std_dev_ddG_stab_HET', 'Min_ddG_stab_HET', 'Max_ddG_stab_HET'))
## Binding energy ddGs (only HMs because this experiment only works with one gene copy)
HM_int_A_B<-read_delim('../Data/Mutagenesis_results/006_gathered_data/2rk1_HM/A-B/interface_ddGs_tabs.txt',
delim='\t', col_names = c('Chain', 'WT_res', 'Mut_res', 'Mean_ddG_int_HM', 'Std_dev_ddG_int_HM', 'Min_ddG_int_HM', 'Max_ddG_int_HM'))
# Load libraries
library(tidyverse)
library(magrittr)
library(ggplot2)
library(cowplot)
library(Cairo)
theme_set(theme_cowplot())
# Prepare a table of amino acid names
aa_three2one <- data.frame(cbind(c('A', 'R', 'D', 'N', 'C',
'E', 'Q', 'G', 'H', 'I',
'L', 'K', 'M', 'F', 'P',
'S', 'T', 'W', 'Y', 'V'),
c('ALA', 'ARG', 'ASN', 'ASP', 'CYS',
'GLU', 'GLN', 'GLY', 'HIS', 'ILE',
'LEU', 'LYS', 'MET', 'PHE', 'PRO',
'SER', 'THR', 'TRP', 'TYR', 'VAL')))
colnames(aa_three2one) <- c('One-letter', 'Three-letter')
## Stability ddGs
HET_stab<-read_delim('/media/axelle/afe8c733-963d-4db8-a2ee-551a0b73c9d7/Angel/PhD_projects/R67_DMS_December2020/Data/Mutagenesis_results/006_gathered_data/2rk1_monomer_HM/stability_monomer_ddGs_tabs.txt',
delim='\t', col_names = c('Chain', 'WT_res', 'Mut_res', 'Mean_ddG_stab_HET', 'Std_dev_ddG_stab_HET', 'Min_ddG_stab_HET', 'Max_ddG_stab_HET'))
## Binding energy ddGs (only HMs because this experiment only works with one gene copy)
HM_int_A_B<-read_delim('/media/axelle/afe8c733-963d-4db8-a2ee-551a0b73c9d7/Angel/PhD_projects/R67_DMS_December2020/Data/Mutagenesis_results/006_gathered_data/2rk1_HM/A-B/interface_ddGs_tabs.txt',
delim='\t', col_names = c('Chain', 'WT_res', 'Mut_res', 'Mean_ddG_int_HM', 'Std_dev_ddG_int_HM', 'Min_ddG_int_HM', 'Max_ddG_int_HM'))
HM_int_A_C<-read_delim('/media/axelle/afe8c733-963d-4db8-a2ee-551a0b73c9d7/Angel/PhD_projects/R67_DMS_December2020/Data/Mutagenesis_results/006_gathered_data/2rk1_HM/A-C/interface_ddGs_tabs.txt',
delim='\t', col_names = c('Chain', 'WT_res', 'Mut_res', 'Mean_ddG_int_HM', 'Std_dev_ddG_int_HM', 'Min_ddG_int_HM', 'Max_ddG_int_HM'))
HM_int_A_D<-read_delim('/media/axelle/afe8c733-963d-4db8-a2ee-551a0b73c9d7/Angel/PhD_projects/R67_DMS_December2020/Data/Mutagenesis_results/006_gathered_data/2rk1_HM/A-D/interface_ddGs_tabs.txt',
delim='\t', col_names = c('Chain', 'WT_res', 'Mut_res', 'Mean_ddG_int_HM', 'Std_dev_ddG_int_HM', 'Min_ddG_int_HM', 'Max_ddG_int_HM'))
HM_int_B_C<-read_delim('/media/axelle/afe8c733-963d-4db8-a2ee-551a0b73c9d7/Angel/PhD_projects/R67_DMS_December2020/Data/Mutagenesis_results/006_gathered_data/2rk1_HM/B-C/interface_ddGs_tabs.txt',
delim='\t', col_names = c('Chain', 'WT_res', 'Mut_res', 'Mean_ddG_int_HM', 'Std_dev_ddG_int_HM', 'Min_ddG_int_HM', 'Max_ddG_int_HM'))
HM_int_B_D<-read_delim('/media/axelle/afe8c733-963d-4db8-a2ee-551a0b73c9d7/Angel/PhD_projects/R67_DMS_December2020/Data/Mutagenesis_results/006_gathered_data/2rk1_HM/B-D/interface_ddGs_tabs.txt',
delim='\t', col_names = c('Chain', 'WT_res', 'Mut_res', 'Mean_ddG_int_HM', 'Std_dev_ddG_int_HM', 'Min_ddG_int_HM', 'Max_ddG_int_HM'))
HM_int_B_D<-read_delim('/media/axelle/afe8c733-963d-4db8-a2ee-551a0b73c9d7/Angel/PhD_projects/R67_DMS_December2020/Data/Mutagenesis_results/006_gathered_data/2rk1_HM/B-D/interface_ddGs_tabs.txt',
delim='\t', col_names = c('Chain', 'WT_res', 'Mut_res', 'Mean_ddG_int_HM', 'Std_dev_ddG_int_HM', 'Min_ddG_int_HM', 'Max_ddG_int_HM'))
## Complex name (for figures)
complex_name = '2rk1'
# Separate the list of interface residues for the two proteins that make up each interface
## Interface data
interface_data <- read_delim('/media/axelle/afe8c733-963d-4db8-a2ee-551a0b73c9d7/Angel/PhD_projects/R67_DMS_December2020/Data/Mutagenesis_results/004_interfaces/2rk1/dist_regions_2rk1_bio_check_Repair.pdb.txt', delim = '\t', col_names = c('Interface', 'Residues'))
interface_data_new <- interface_data %>%
separate(col = Residues, into = c('First_subunit', 'Second_subunit'), sep = ';')
interface_data_A <- c()
# Take all the core + rim residues of subunit A
for(row_num in seq(1, nrow(interface_data_new))){
# Check this interface includes subunit A
if(interface_data_new$Interface[row_num] %in% c('A,B', 'A,C', 'A,D')){
# Save the subunits involved
interface_subunits <- interface_data_new$Interface[row_num]
# Save the residues
interface_residues <- strsplit(interface_data_new$First_subunit[row_num], split = ',')
# Put the two columns together
col_interfaces <- rep(interface_subunits, length(interface_residues[[1]]))
new_rows <- cbind(col_interfaces, interface_residues[[1]])
interface_data_A <- rbind(interface_data_A, new_rows)
}
}
interface_data_A <- as.data.frame(interface_data_A)
## Final formatting for the core + rim interface residues of chain A
interface_data_A %<>% separate(col = V2, into = c('Position', 'Residue_name'), sep = 2) %>%
mutate(Position = as.numeric(Position))
#### This will help me distinguish between rim and core interface residues ####
# Load the data on contacting residues
contacting_residues <- read_delim('/media/axelle/afe8c733-963d-4db8-a2ee-551a0b73c9d7/Angel/PhD_projects/R67_DMS_December2020/Data/Mutagenesis_results/004_interfaces/2rk1/dist_contacting_residues.txt', delim = '\t', col_names = c('Residue1', 'Residue2'))
# Separate the columns of the list of contacting residues
contacting_residues_new <- contacting_residues %>%
separate(col = Residue1, into = c('Position1', 'tmp1'), sep = 2) %>%
separate(col = tmp1, into = c('Subunit1', 'Residue1_name'), sep = 1) %>%
separate(col = Residue2, into = c('Position2', 'tmp2'), sep = 2) %>%
separate(col = tmp2, into = c('Subunit2', 'Residue2_name'), sep = 1)
# Get a list of contacting residues
list_positions <- c()
list_residue_names <- c()
for(row_num in seq(1, nrow(contacting_residues_new))){
# Get the residues from chain A
if(contacting_residues_new$Subunit1[row_num] == 'A'){
new_pos <- contacting_residues_new$Position1[row_num]
new_resname <- contacting_residues_new$Residue1_name[row_num]
}else{
if(contacting_residues_new$Subunit2[row_num] == 'A'){
new_pos <- contacting_residues_new$Position2[row_num]
new_resname <- contacting_residues_new$Residue2_name[row_num]
}
}
# Add them to the lists if they have not yet been added
if(!(new_pos %in% list_positions)){
list_positions <- c(list_positions, new_pos)
list_residue_names <- c(list_residue_names, new_resname)
}
}
list_contacting_residues_A <- as.data.frame(cbind(as.numeric(list_positions),
list_residue_names))
# Distinguish between core and rim residues
interface_data_A %<>%
mutate(Core_interface = ifelse(Position %in% list_contacting_residues_A$V1, 'Core', 'Rim'))
# Read data table
data_isa <- read_delim(delim = ';', locale = locale(decimal_mark = ','),
file = '/media/axelle/afe8c733-963d-4db8-a2ee-551a0b73c9d7/Angel/PhD_projects/R67_DMS_December2020/Data/Sequencing/IGA_datasheet_R67expTMP_04_12_20.csv')
# Read the normalized scores at the residue level
codon_file_list <- list.files('/media/axelle/afe8c733-963d-4db8-a2ee-551a0b73c9d7/Angel/PhD_projects/R67_DMS_December2020/Analysis/log2_FC/Residues_normalized/', include.dirs = F,
full.names = T)
all_codon_data <- c()
for(infile in codon_file_list){
# Extract the pool number
pool_number <- str_extract(infile, regex('\\d+_\\d+'))
# Read the file
codon_df <- read_delim(delim = '\t', col_names = T, file = infile)
colnames(codon_df)[1] <- 'Codon'
# Transform into a tidy formatted df and add the pool number
new_codon_df <- codon_df %>% gather(-Codon, key = position, value = abundance)
new_codon_df %<>% mutate(paired_pool = pool_number) %>%
separate(col = paired_pool, into = c('Sample_end', 'Sample_start'), sep = '_') %>%
mutate(Sample_end = as.numeric(Sample_end),
Sample_start = as.numeric(Sample_start))
all_codon_data <- rbind(all_codon_data, new_codon_df)
}
# Add the information about arabinose concentration, time, and replicate
all_codon_data_full <- inner_join(x = all_codon_data, y = data_isa %>% select(Sample_ID, Arabinose, Timepoint, Replicate),
by = c("Sample_end" = "Sample_ID"))
all_codon_data_full$position <- as.numeric(all_codon_data_full$position)
#### Add information about interfaces ####
# With the left join I won't be losing positions for which I don't have data
fitness_effects_interfaces <- left_join(x = all_codon_data_full,
y = interface_data_A %>% select(-Residue_name),
by = c('position' = 'Position'))
# Let's see the distributions of fitness effects for mutations at the core, rim, or other
# positions of the interface between A and B
p1 <- fitness_effects_interfaces %>%
filter(or(col_interfaces == 'A,B', is.na(col_interfaces))) %>%
filter(position >= 22) %>%
mutate(Core_interface = ifelse(is.na(Core_interface), 'Other', Core_interface)) %>%
ggplot(aes(x = abundance, fill = Core_interface)) +
scale_fill_manual(values = c('#ff0000', '#0000ff', '#ff9900'), name = 'Region') +
geom_density(alpha = 0.5) +
xlab('Normalized score') + ylab('Density')
p1
## Repeat for interface between A and C
p1 <- fitness_effects_interfaces %>%
filter(or(col_interfaces == 'A,C', is.na(col_interfaces))) %>%
# filter(position >= 22) %>%
mutate(Core_interface = ifelse(is.na(Core_interface), 'Other', Core_interface)) %>%
ggplot(aes(x = abundance, fill = Core_interface)) +
geom_density(alpha = 0.5) +
scale_fill_manual(values = c('#ff0000', '#0000ff', '#ff9900'), name = 'Region') +
xlab('Normalized score') + ylab('Density')
p1
## Repeat for interface between A and D
p1 <- fitness_effects_interfaces %>%
filter(or(col_interfaces == 'A,D', is.na(col_interfaces))) %>%
# filter(position >= 22) %>%
mutate(Core_interface = ifelse(is.na(Core_interface), 'Other', Core_interface)) %>%
ggplot(aes(x = abundance, fill = Core_interface)) +
geom_density(alpha = 0.5) +
scale_fill_manual(values = c('#ff0000', '#0000ff', '#ff9900'), name = 'Region') +
xlab('Normalized score') + ylab('Density')
p1
#### Let's try one that includes the residues from all the interfaces at the same time ####
p1 <- fitness_effects_interfaces %>%
# filter(position >= 22) %>%
mutate(Core_interface = ifelse(is.na(Core_interface), 'Other', Core_interface)) %>%
ggplot(aes(x = abundance, fill = Core_interface)) +
geom_density(alpha = 0.5) +
scale_fill_manual(values = c('#ff0000', '#0000ff', '#ff9900'), name = 'Region') +
xlab('Normalized score') + ylab('Density')
p1
# For the dataframes on mutational effects, separate the WT residue from the position
HET_stab %<>% separate(col = WT_res, into = c('WT', 'Position'), sep = 1) %>%
mutate(Position = as.numeric(Position))
HM_int_A_B %<>% separate(col = WT_res, into = c('WT', 'Position'), sep = 1) %>%
mutate(Position = as.numeric(Position))
HM_int_A_C %<>% separate(col = WT_res, into = c('WT', 'Position'), sep = 1) %>%
mutate(Position = as.numeric(Position))
HM_int_A_D %<>% separate(col = WT_res, into = c('WT', 'Position'), sep = 1) %>%
mutate(Position = as.numeric(Position))
# Start joining the data
all_data_tmp1 <- inner_join(x = all_codon_data_full,
y = HET_stab %>% select(Position, Mut_res, Mean_ddG_stab_HET),
by = c('Codon' = 'Mut_res', 'position' = 'Position'))
all_data_tmp2 <- inner_join(x = all_data_tmp1,
y = HM_int_A_B %>% mutate(Mean_ddG_int_HM_A_B = Mean_ddG_int_HM) %>%
select(Position, Mut_res, Mean_ddG_int_HM_A_B),
by = c('Codon' = 'Mut_res', 'position' = 'Position'))
all_data_tmp3 <- inner_join(x = all_data_tmp2,
y = HM_int_A_C %>% mutate(Mean_ddG_int_HM_A_C = Mean_ddG_int_HM) %>%
select(Position, Mut_res, Mean_ddG_int_HM_A_C),
by = c('Codon' = 'Mut_res', 'position' = 'Position'))
all_data_final <- inner_join(x = all_data_tmp3,
y = HM_int_A_D %>% mutate(Mean_ddG_int_HM_A_D = Mean_ddG_int_HM) %>%
select(Position, Mut_res, Mean_ddG_int_HM_A_D),
by = c('Codon' = 'Mut_res', 'position' = 'Position'))
# Remove the NAs from the "abundance" column (normalized scores for residues that do not have synonymos codons,
# that is, MET and TRP)
all_data_final %>% select(abundance, Mean_ddG_stab_HET,
Mean_ddG_int_HM_A_B, Mean_ddG_int_HM_A_C,
Mean_ddG_int_HM_A_D) %>%
filter(!(is.na(abundance))) %>%
cor()
View(all_data_final)
View(all_codon_data_full)
stop_codons <- all_codon_data_full %>% filter(Codon == '*')
View(stop_codons)
summary(stop_codons$abundance)
stop_codons %>% arrange(abundance)
?arrange
write.table(x = all_data_final, file = '/home/axelle/Bureau/all_codon_data_final_R67_FoldX_DMS.txt', quote = F, sep = '\t', row.names = F, col.names = T)
stop_codons <- all_codon_data_full %>% filter(Codon == '*') %>% arrange(desc(abundance))
24/4
0.25 * 0.25
0.0625 * 6
0.5*0.5*0.5*0.5
00.5**50
8.88e-16*1.26e14
library(tidyverse)
install.packages('tidyverse')
library(tidyverse)
install.packages('ggplot2')
install.packages('magrittr')
install.packages('cowplot')
install.packages('tidyverse')
install.packages('magrittr')
install.packages('cowplot2')
install.packages('cowplot')
install.packages('Cairo')
install.packages('xlsx')
install.packages('xlsx')
install.packages('xlsx')
install.packages('xlsx')
library(xlsx)
install.packages('xlsx')
install.packages('xlsx')
install.packages('xlsx')
library(rJava)
library(rJava)
library(rJava)
library(rJava)
library(rJava)
install.packages('rJava')
install.packages('rJava')
install.packages('rJava')
install.packages('rJava')
install.packages('xlsx')
library(xlsx)
library(xlsx)
libaray(xlsx)
library(xlsx)
# Load libraries
library(tidyverse)
library(magrittr)
library(ggplot2)
library(cowplot)
library(readr)
library(magick)
library(rsvg)
theme_set(theme_cowplot())
# Set working directory to the main folder with the data
setwd('/media/axelle/Angel_backup/iGEM/Article/Data/MD_toehold1')
#### All-atom simulation ####
# Load the file with the data
all_atom <- read_delim('hbonds_40ns_hairpin.dat', delim = ' ', col_names = c('Frame', 'Hbonds')) %>%
mutate(Simulation = 'Explicit solvent') %>% mutate(Time = Frame / 100)
summary_all_atom <- all_atom %>% summarise(mean = mean(Hbonds), std_dev = sd(Hbonds))
expected_hairpin <- 40
p5 <- all_atom %>% mutate(Time = Frame / 100) %>%
ggplot(aes(x = Time, y = Hbonds)) +
geom_point() + geom_line() +
annotate("rect", xmin=-Inf, xmax=Inf,
ymin = summary_all_atom$mean - summary_all_atom$std_dev,
ymax = summary_all_atom$mean + summary_all_atom$std_dev,
alpha=0.5, fill="grey") +
#   geom_abline(slope = 0, intercept = expected_hairpin, colour = 'blue') +
geom_abline(slope = 0, intercept = summary_all_atom$mean, colour = 'black', linetype = 'dashed') +
# ggtitle('Only hairpin') +
ylim(0,40) +
# annotate("text", label = 'Mean hydrogen bonds', colour = 'red',
# x =  max(all_atom$Time)/2, y = summary_all_atom$mean[1] - 1, fontface = 'bold') +
# annotate("text", label = 'Theoretical hydrogen bonds', colour = 'blue',
#          x =  max(all_atom$Time)/2, y = expected_hairpin - 1, fontface = 'bold') +
xlab('Time (ns)') + ylab('Hydrogen bond count')
p5
# Let's see this as a percentage
all_atom_toehold_1 <- all_atom %>% mutate(Toehold_num = 'Toehold 1', Percentage_hbonds = Hbonds / expected_hairpin)
hbonds_details_raw <- read_delim('hbonds-details_no_pct_2019-10-10.dat', delim = '\t', skip = 1)
hbonds_details <- hbonds_details_raw %>%
mutate(donor = parse_number(donor), acceptor = parse_number(acceptor)) %>%
rowwise() %>% mutate(res1 = min(donor, acceptor), res2 = max(donor, acceptor))
# Look at the distribution
p9 <- hbonds_details %>% ggplot(aes(x = occupancy)) +
geom_histogram()
p9
# Read the intended matches (first commands will be intended overall, the second line will be intended in the hairpin)
# hbonds_intended <- read_delim('/media/axelle/Angel_backup/iGEM/RNA_MD/toehold_1/pairlist_toehold1.txt', delim = '\t', col_names = c('res1', 'res2'))
hbonds_intended <- read_delim('pairlist_toehold1_hairpin.txt', delim = '\t', col_names = c('res1', 'res2'))
hbonds_details %<>% mutate(intended = ifelse(res1 == hbonds_intended$res1 && res2 == hbonds_intended$res2, 'Yes', 'No'))
# A function to label hbonds as intended or not
call_intended_hbonds <- function(hbonds_details, hbonds_intended){
intended = c()
for(row_hbond in 1:nrow(hbonds_details)){
new_val = 'No'
res1 = hbonds_details$res1[row_hbond]
res2 = hbonds_details$res2[row_hbond]
for(row_intended in 1:nrow(hbonds_intended)){
# Check if this pair is in the list of intended pairs
intended_res1 = hbonds_intended$res1[row_intended]
intended_res2 = hbonds_intended$res2[row_intended]
if(res1 == intended_res1 && res2 == intended_res2){
new_val = 'Yes'
}
}
intended = c(intended, new_val)
}
hbonds_details$intended <- intended
return(hbonds_details)
}
hbonds_details <- call_intended_hbonds(hbonds_details, hbonds_intended)
# Let's see if the intended bonds have a higher occupancy than the others
hbonds_details %>% group_by(intended) %>% summarise(mean = mean(occupancy))
p10 <- hbonds_details %>% ggplot(aes(x = occupancy, fill = intended)) +
geom_histogram()
p10
# A copy of the same data but listing the residue on the right side as res1
hbonds_right_side <- hbonds_details %>%
select(donor, acceptor, occupancy, res2, res1, intended)
colnames(hbonds_right_side) <- c('donor', 'acceptor', 'occupancy', 'res1', 'res2', 'intended')
new_hbonds <- rbind(hbonds_details, hbonds_right_side)
new_hbonds_details <- hbonds_details %>%
filter(res1 >= 18 && res1 <= 70 && intended == 'Yes') %>%
arrange(desc(occupancy)) %>%
group_by(res1, res2) %>%
summarise(max_occupancy = max(occupancy)) %>%
arrange(desc(max_occupancy))
new_hbonds_details <- new_hbonds %>%
group_by(res1, intended) %>%
summarise(mean_occupancy = mean(occupancy)) %>%
arrange(desc(mean_occupancy))
class(new_hbonds_details$res1)
p <- new_hbonds_details %>%
ungroup() %>%
mutate(intended = ifelse(intended == 'Yes', 'Canonical', 'Not canonical')) %>%
mutate(intended = factor(intended, levels = c('Not canonical', 'Canonical'))) %>%
ggplot(aes(x = res1, y = mean_occupancy, fill = intended)) +
labs(fill = '') +
geom_bar(stat = 'identity', position = 'stack') +
xlab('Position') + ylab('Mean occupancy (%)')
p
# Load figure 3C
# fig3C <- draw_image("../../Figures/Figure_hydrogen_bonds_new.svg")
fig3C <- image_read_svg("../../Figures/Figure_hydrogen_bonds_new.svg", width = 350)
fig3C
ugh <- plot_grid(p5, p, fig3C_new)
ugh <- plot_grid(p5, p, fig3C)
fig3C_new <- image_ggplot(fig3C)
ugh <- plot_grid(p5, p, fig3C_new)
ugh
fig3_tmp <- plot_grid(p5, p, nrow = 2, labels = c('A', 'B'))
fig3_tmp
fig3C_tmp <- plot_grid(fig3C_new, nrow = 1, labels = c('C'))
fig3C_tmp
fig3C <- plot_grid(fig3_tmp, fig3C_tmp, ncol = 2)
fig3C
fig3C <- plot_grid(fig3_tmp, fig3C_tmp, ncol = 2, rel_widths = c(2, 1))
fig3C
fig3 <- plot_grid(fig3_tmp, fig3C_tmp, ncol = 2, rel_widths = c(2, 1))
fig3
ggsave(fig3, filename = '../../Figures/Figure3.png', device = 'png',
width = 10, height = 7, dpi = 500)
ggsave(fig3, filename = '../../Figures/Figure3.pdf', device = cairo_pdf(),
width = 10, height = 7, dpi = 500)
# Load libraries
library(tidyverse)
library(magrittr)
library(ggplot2)
library(cowplot)
library(readr)
library(magick)
library(rsvg)
theme_set(theme_cowplot())
# Set working directory to the main folder with the data
setwd('/media/axelle/Angel_backup/iGEM/Article/Data/MD_toehold1')
#### All-atom simulation ####
# Load the file with the data
all_atom <- read_delim('hbonds_40ns_hairpin.dat', delim = ' ', col_names = c('Frame', 'Hbonds')) %>%
mutate(Simulation = 'Explicit solvent') %>% mutate(Time = Frame / 100)
summary_all_atom <- all_atom %>% summarise(mean = mean(Hbonds), std_dev = sd(Hbonds))
expected_hairpin <- 40
p5 <- all_atom %>% mutate(Time = Frame / 100) %>%
ggplot(aes(x = Time, y = Hbonds)) +
geom_point() + geom_line() +
annotate("rect", xmin=-Inf, xmax=Inf,
ymin = summary_all_atom$mean - summary_all_atom$std_dev,
ymax = summary_all_atom$mean + summary_all_atom$std_dev,
alpha=0.5, fill="grey") +
#   geom_abline(slope = 0, intercept = expected_hairpin, colour = 'blue') +
geom_abline(slope = 0, intercept = summary_all_atom$mean, colour = 'black', linetype = 'dashed') +
# ggtitle('Only hairpin') +
ylim(0,40) +
# annotate("text", label = 'Mean hydrogen bonds', colour = 'red',
# x =  max(all_atom$Time)/2, y = summary_all_atom$mean[1] - 1, fontface = 'bold') +
# annotate("text", label = 'Theoretical hydrogen bonds', colour = 'blue',
#          x =  max(all_atom$Time)/2, y = expected_hairpin - 1, fontface = 'bold') +
xlab('Time (ns)') + ylab('Hydrogen bond count')
p5
ggsave(p5, filename = '../../Figures/Fig3A.pdf', device = cairo_pdf,
width = 10, height = 7, dpi = 500)
# Let's see this as a percentage
all_atom_toehold_1 <- all_atom %>% mutate(Toehold_num = 'Toehold 1', Percentage_hbonds = Hbonds / expected_hairpin)
hbonds_details_raw <- read_delim('hbonds-details_no_pct_2019-10-10.dat', delim = '\t', skip = 1)
hbonds_details <- hbonds_details_raw %>%
mutate(donor = parse_number(donor), acceptor = parse_number(acceptor)) %>%
rowwise() %>% mutate(res1 = min(donor, acceptor), res2 = max(donor, acceptor))
# Look at the distribution
p9 <- hbonds_details %>% ggplot(aes(x = occupancy)) +
geom_histogram()
p9
# Read the intended matches (first commands will be intended overall, the second line will be intended in the hairpin)
# hbonds_intended <- read_delim('/media/axelle/Angel_backup/iGEM/RNA_MD/toehold_1/pairlist_toehold1.txt', delim = '\t', col_names = c('res1', 'res2'))
hbonds_intended <- read_delim('pairlist_toehold1_hairpin.txt', delim = '\t', col_names = c('res1', 'res2'))
hbonds_details %<>% mutate(intended = ifelse(res1 == hbonds_intended$res1 && res2 == hbonds_intended$res2, 'Yes', 'No'))
# A function to label hbonds as intended or not
call_intended_hbonds <- function(hbonds_details, hbonds_intended){
intended = c()
for(row_hbond in 1:nrow(hbonds_details)){
new_val = 'No'
res1 = hbonds_details$res1[row_hbond]
res2 = hbonds_details$res2[row_hbond]
for(row_intended in 1:nrow(hbonds_intended)){
# Check if this pair is in the list of intended pairs
intended_res1 = hbonds_intended$res1[row_intended]
intended_res2 = hbonds_intended$res2[row_intended]
if(res1 == intended_res1 && res2 == intended_res2){
new_val = 'Yes'
}
}
intended = c(intended, new_val)
}
hbonds_details$intended <- intended
return(hbonds_details)
}
hbonds_details <- call_intended_hbonds(hbonds_details, hbonds_intended)
# Let's see if the intended bonds have a higher occupancy than the others
hbonds_details %>% group_by(intended) %>% summarise(mean = mean(occupancy))
p10 <- hbonds_details %>% ggplot(aes(x = occupancy, fill = intended)) +
geom_histogram()
p10
# Look at the rankings
View(hbonds_details %>% select(-donor, -acceptor) %>% arrange(desc(occupancy)))
View(hbonds_details %>% select(-donor, -acceptor) %>% filter(intended == 'Yes') %>% arrange(desc(occupancy)))
# A copy of the same data but listing the residue on the right side as res1
hbonds_right_side <- hbonds_details %>%
select(donor, acceptor, occupancy, res2, res1, intended)
colnames(hbonds_right_side) <- c('donor', 'acceptor', 'occupancy', 'res1', 'res2', 'intended')
new_hbonds <- rbind(hbonds_details, hbonds_right_side)
new_hbonds_details <- hbonds_details %>%
filter(res1 >= 18 && res1 <= 70 && intended == 'Yes') %>%
arrange(desc(occupancy)) %>%
group_by(res1, res2) %>%
summarise(max_occupancy = max(occupancy)) %>%
arrange(desc(max_occupancy))
new_hbonds_details <- new_hbonds %>%
group_by(res1, intended) %>%
summarise(mean_occupancy = mean(occupancy)) %>%
arrange(desc(mean_occupancy))
class(new_hbonds_details$res1)
p <- new_hbonds_details %>%
ungroup() %>%
mutate(intended = ifelse(intended == 'Yes', 'Canonical', 'Not canonical')) %>%
mutate(intended = factor(intended, levels = c('Not canonical', 'Canonical'))) %>%
ggplot(aes(x = res1, y = mean_occupancy, fill = intended)) +
labs(fill = '') +
geom_bar(stat = 'identity', position = 'stack') +
xlab('Position') + ylab('Mean occupancy (%)')
p
p
p
ggsave(p, filename = '../../Figures/Barplot_occupancy_new.pdf', device = cairo_pdf,
width = 10, height = 7, dpi = 500)
178 + 384
gc()
gc()
