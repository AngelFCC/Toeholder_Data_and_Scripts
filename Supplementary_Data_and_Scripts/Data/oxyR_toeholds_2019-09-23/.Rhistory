library(tidyverse)
library(ggpubr)
library(ggplot2)
library(magrittr)
library(cowplot)
library(Cairo) # Only works on my Linux computer
library(DescTools) # Only works on my Linux computer
# ClinVar (considering burial correlation)
clinvar_dgd_curie <- read.table('~/Dropbox/Hiver2019/Internship_Joe_Marsh/Disease_mutations/PDB_interface_symmetry/002_burial_correlation/disease_int_seq_ident_dgd_curie_burial_correlation.out', h = F, sep = ',')
# ClinVar (considering burial correlation)
clinvar_dgd_curie <- read.table('/media/axelle/Angel_backup/Dropbox/Hiver2019/Internship_Joe_Marsh/Disease_mutations/PDB_interface_symmetry/002_burial_correlation/disease_int_seq_ident_dgd_curie_burial_correlation.out', h = F, sep = ',')
colnames(clinvar_dgd_curie) <- c('gene_name', 'ensembl_id', 'residue_number_Ensembl', 'missense_mutation',
'pdb_chain_info', 'pdb_symmetry_info', 'secondary_structure', 'location',
'sasa_complex', 'sasa_subunit','ddg_complex', 'ddg_subunit', 'partners_info')
clinvar_dgd_curie$gene_name <- as.character(clinvar_dgd_curie$gene_name)
# gnomAD (considering burial correlation)
gnomAD_dgd_curie <- read.table('/media/axelle/Angel_backup/Dropbox/Hiver2019/Internship_Joe_Marsh/Disease_mutations/PDB_interface_symmetry/002_burial_correlation/gnomad_int_seq_ident_dgd_curie_burial_correlation.out', h = F, sep = ',')
colnames(gnomAD_dgd_curie) <- c('gene_name', 'ensembl_id', 'residue_number_Ensembl', 'missense_mutation',
'pdb_chain_info', 'pdb_symmetry_info', 'secondary_structure', 'location',
'sasa_complex', 'sasa_subunit','ddg_complex', 'ddg_subunit', 'partners_info')
gnomAD_dgd_curie$gene_name <- as.character(gnomAD_dgd_curie$gene_name)
reformat_sets2 <- function(dataset){
dataset_new <- dataset %>% separate(col = pdb_chain_info,
into = c('PDB', 'Chain_A', 'Position_PDB_A'),
sep = ' ')
# The last filter removes the three entries that were superseeded
dataset_new %<>%
mutate(partners_info = strsplit(as.character(partners_info), '; ')) %>%
unnest(partners_info) %>%
separate(col = partners_info,
into = c('Gene_name_B', 'Chain_B', 'Buried_surface_B',
'seq_ident', 'Complex_type', 'Burial_correlation'),
sep = ' ') %>%
filter(!(is.na(Complex_type)))
}
binomial_conf_int <- function(dataset){
# Get the confidence intervals
conf_intervals <- c()
for(entry_num in 1:nrow(dataset)){
clinvar <- dataset$n[entry_num]
gnomad <- dataset$gnomad[entry_num]
disease_ratio <- dataset$disease_ratio[entry_num]
if(is.na(disease_ratio)){
conf_intervals <- rbind(conf_intervals, c(0,0))
}else{
a <- binom.test(clinvar, clinvar + gnomad, p = disease_ratio)
conf_intervals <- rbind(conf_intervals, a$conf.int)
}
}
conf_intervals <- as.data.frame(conf_intervals)
colnames(conf_intervals) <- c('min', 'max')
dataset$conf_min <- conf_intervals$min
dataset$conf_max <- conf_intervals$max
return(dataset)
}
# Should write a function to calculate relative enrichment
get_relative_enrichment <- function(clinvar, gnomad){
clinvar_group_sums <- summary_clinvar_overall %>% summarise(set_total = sum(n))
gnomad_group_sums <- summary_gnomad_overall %>% summarise(set_total = sum(n))
clinvar %<>% mutate(group_sums = rep(clinvar_group_sums$set_total, nrow(clinvar))) %>%
mutate(percentage = n / group_sums)
gnomad %<>% mutate(group_sums = rep(gnomad_group_sums$set_total, nrow(clinvar))) %>%
mutate(percentage = n / group_sums)
clinvar %<>% mutate(gnomad = gnomad$percentage) %>%
mutate(rel_enrichment = round(percentage/gnomad, 2))
return(clinvar)
}
# Apply the reformatting function on both datasets (with correlation)
clinvar_dgd_curie_new <- reformat_sets2(clinvar_dgd_curie)
gnomAD_dgd_curie_new <- reformat_sets2(gnomAD_dgd_curie)
TMalign <- read.table('/media/axelle/Angel_backup/Dropbox/Hiver2019/Internship_Joe_Marsh/Disease_mutations/tm_pairs.out',
h = F, sep = '\t', fill = TRUE)
# Replace the hyphen and the NAs by zeros
TMalign <- as.data.frame(apply(TMalign, 2, function(x) ifelse(or(x == '-', is.na(x)), 0, x))) %>%
separate(col = V2, into = c('Chain_A', 'Chain_B'), sep = ' ')
colnames(TMalign) <- c('PDB', 'Chain_A', 'Chain_B', 'TMscore_short', 'TMscore_long', 'RMSD_common', 'RMSD_super')
kpax <- read.table('/media/axelle/Angel_backup/Dropbox/Hiver2019/Internship_Joe_Marsh/Disease_mutations/kpax_pairs.out',
h = F, sep = '\t', fill = TRUE)
# Replace the hyphen and the NAs by zeros
kpax <- as.data.frame(apply(kpax, 2, function(x) ifelse(or(x == '-', is.na(x)), 0, x))) %>%
separate(col = V2, into = c('Chain_A', 'Chain_B'), sep = ' ')
colnames(kpax) <- c('PDB', 'Chain_A', 'Chain_B', 'K_score', 'G_score',
'J_score', 'M_score', 'T_score', 'RMSD', 'N',
'D', 'I', 'P', 'Len', 'Seg', 'TP')
struc_alignments <- inner_join(x = kpax, y = TMalign,
by = c("PDB" = "PDB", "Chain_A" = "Chain_A", "Chain_B" = "Chain_B"))
# Make sure that all the columns are numeric
for(i in 4:ncol(struc_alignments)){
struc_alignments[,i] <- as.numeric(as.character(struc_alignments[,i]))
}
#### I can use the chains to add TMalign and kpax scores ####
# Load the rms.out file to get the lengths of the chains. I will use this to impose
# the restriction that TPs must have similar chain lengths
rmsd_data <- read.table('/media/axelle/Angel_backup/Dropbox/Hiver2019/Internship_Joe_Marsh/Disease_mutations/rms.out', h = F, sep = '\t')
colnames(rmsd_data) <- c('PDB_ID', 'Chain_A', 'Chain_B', 'RMSD_super_pymol',
'RMSD_align_pymol', 'Length_A', 'Length_B')
# I am also going to remove the cleaved complexes now
# Remove interactions whose shortest chain has fewer than 50 residues
struc_alignments %<>% mutate(PDB = as.character(PDB))
clinvar_struc_mid <- inner_join(x = clinvar_dgd_curie_new, y = struc_alignments,
by = c("PDB" = "PDB", "Chain_A" = "Chain_A", "Chain_B" = "Chain_B")) %>%
filter(!(Complex_type %in% c('CS', 'CD')), Len > 50)
rmsd_data %<>% mutate(PDB_ID = as.character(PDB_ID),
Chain_A = as.character(Chain_A),
Chain_B = as.character(Chain_B))
clinvar_struc <- inner_join(x = clinvar_struc_mid, y = rmsd_data,
by = c("PDB" = "PDB_ID", "Chain_A" = "Chain_A", "Chain_B" = "Chain_B")) %>%
mutate(length_ratio = ifelse(Length_A <= Length_B,
Length_A / Length_B,
Length_B / Length_A))
gnomad_struc_mid <- inner_join(x = gnomAD_dgd_curie_new, y = struc_alignments,
by = c("PDB" = "PDB", "Chain_A" = "Chain_A", "Chain_B" = "Chain_B")) %>%
filter(!(Complex_type %in% c('CS', 'CD')), Len > 50)
gnomad_struc <- inner_join(x = gnomad_struc_mid, y = rmsd_data,
by = c("PDB" = "PDB_ID", "Chain_A" = "Chain_A", "Chain_B" = "Chain_B")) %>%
mutate(length_ratio = ifelse(Length_A <= Length_B,
Length_A / Length_B,
Length_B / Length_A))
# Make sure that the sequence identities are numeric
clinvar_struc$seq_ident <- as.numeric(clinvar_struc$seq_ident)
gnomad_struc$seq_ident <- as.numeric(gnomad_struc$seq_ident)
# kpax M-score
clinvar_struc$M_class <- ifelse(clinvar_struc$seq_ident >= 95, 'HM',
ifelse(and(clinvar_struc$M_score >= 0.4, clinvar_struc$length_ratio >= 0.7), 'TP',
'TN'))
gnomad_struc$M_class <- ifelse(gnomad_struc$seq_ident >= 95, 'HM',
ifelse(and(gnomad_struc$M_score >= 0.4, gnomad_struc$length_ratio >= 0.7), 'TP', 'TN'))
# kpax T-score
clinvar_struc$T_class <- ifelse(clinvar_struc$seq_ident >= 95, 'HM',
ifelse(and(clinvar_struc$T_score >= 0.4, clinvar_struc$length_ratio >= 0.7), 'TP', 'TN'))
gnomad_struc$T_class <- ifelse(gnomad_struc$seq_ident >= 95, 'HM',
ifelse(and(gnomad_struc$T_score >= 0.4, gnomad_struc$length_ratio >= 0.7), 'TP', 'TN'))
# TMalign short
clinvar_struc$TM_short_class <- ifelse(clinvar_struc$seq_ident >= 95, 'HM',
ifelse(and(clinvar_struc$TMscore_short >= 0.4, clinvar_struc$length_ratio >= 0.7), 'TP', 'TN'))
gnomad_struc$TM_short_class <- ifelse(gnomad_struc$seq_ident >= 95, 'HM',
ifelse(and(gnomad_struc$TMscore_short >= 0.4, gnomad_struc$length_ratio >= 0.7), 'TP', 'TN'))
# TMalign long
clinvar_struc$TM_long_class <- ifelse(clinvar_struc$seq_ident >= 95, 'HM',
ifelse(and(clinvar_struc$TMscore_long >= 0.4, clinvar_struc$length_ratio >= 0.7), 'TP', 'TN'))
gnomad_struc$TM_long_class <- ifelse(gnomad_struc$seq_ident >= 95, 'HM',
ifelse(and(gnomad_struc$TMscore_long >= 0.4, gnomad_struc$length_ratio <= 0.7), 'TP', 'TN'))
# Load the QSbio data
qsbio <- read_delim('/media/axelle/Angel_backup/Dropbox/Hiver2019/QSbio/QSbio.csv', delim = '\t', locale = locale(decimal_mark = ',')) %>%
separate(col = code, into = c('pdb', 'assembly'), sep = '_') %>%
filter(assembly == 1, QSbio.confidence %in% c('High', 'Very high')) %>%
select(pdb, QSbio.confidence)
# Add the QSbio confidence to our tables and filter
clinvar_struc2 <- inner_join(x = clinvar_struc, y = qsbio,
by = c("PDB" = "pdb"))
# The numbers of mutations and unique proteins are reduced to 1/4
length(unique(clinvar_struc2$gene_name))
length(unique(clinvar_struc$gene_name))
gnomad_struc2 <- inner_join(x = gnomad_struc, y = qsbio,
by = c("PDB" = "pdb"))
length(unique(gnomad_struc2$gene_name))
length(unique(gnomad_struc$gene_name))
# Load the Arel data
Arel <- read.table('/media/axelle/Angel_backup/Dropbox/Hiver2019/Internship_Joe_Marsh/Disease_mutations/arel.txt',
h = F, sep = '\t', fill = NA)
# Remove the first line of the file
Arel <- Arel[2:nrow(Arel),]
# Format the Arel table
colnames(Arel) <- c('PDB_chain', 'Arel')
Arel %<>% separate(col = PDB_chain, into = c('PDB', 'Chain'), sep = '_')
# Add the Arel values after formatting slightly the clinvar_struc and gnomad_struc tables
clinvar_struc_flex_mid <- clinvar_struc2 %>% separate(col = pdb_symmetry_info,
into = c('num_chains', 'distinct_chains', 'symmetry', 'resolution'),
sep = ' ' ) %>%
separate(col = Chain_A, into = c('Chain_A_orig', 'Chain_A_new'), sep = '-') %>%
separate(col = Chain_B, into = c('Chain_B_orig', 'Chain_B_new'), sep = '-')
clinvar_struc_flex <- inner_join(x = clinvar_struc_flex_mid, y = Arel,
by = c("PDB" = "PDB", "Chain_A_orig" = "Chain"))
clinvar_struc_flex$num_chains <- as.numeric(clinvar_struc_flex$num_chains)
clinvar_struc_flex$distinct_chains <- as.numeric(clinvar_struc_flex$distinct_chains)
# Add the Arel values after formatting slightly the clinvar_struc and gnomad_struc tables
gnomad_struc_flex_mid <- gnomad_struc2 %>% separate(col = pdb_symmetry_info,
into = c('num_chains', 'distinct_chains', 'symmetry', 'resolution'),
sep = ' ' ) %>%
separate(col = Chain_A, into = c('Chain_A_orig', 'Chain_A_new'), sep = '-') %>%
separate(col = Chain_B, into = c('Chain_B_orig', 'Chain_B_new'), sep = '-')
gnomad_struc_flex <- inner_join(x = gnomad_struc_flex_mid, y = Arel,
by = c("PDB" = "PDB", "Chain_A_orig" = "Chain"))
gnomad_struc_flex$num_chains <- as.numeric(gnomad_struc_flex$num_chains)
gnomad_struc_flex$distinct_chains <- as.numeric(gnomad_struc_flex$distinct_chains)
# Before binning, let's try to get the mean Arel for a given protein
mean_gene_arel <- clinvar_struc_flex %>% group_by(gene_name) %>%
summarise(mean_arel = mean(Arel))
mean_gene_arel2 <- gnomad_struc_flex %>% group_by(gene_name) %>%
summarise(mean_arel = mean(Arel))
# The final Arel will be the mean of the Arel I saw in ClinVar and gnomAD
final_mean_arel <- full_join(x = mean_gene_arel, y = mean_gene_arel2,
by = c("gene_name", "gene_name")) %>%
mutate(mean_arel.x = ifelse(is.na(mean_arel.x), mean_arel.y, mean_arel.x),
mean_arel.y = ifelse(is.na(mean_arel.y), mean_arel.x, mean_arel.y)) %>%
mutate(final_arel = (mean_arel.x + mean_arel.y)/2)
# Bin by Arel, I decided to do it by the quartiles above
# Filtering for high quality QSbio structures reduces the range of available arel values
summary(final_mean_arel$final_arel)
clinvar_struc_flex_new <- inner_join(x = clinvar_struc_flex, y = final_mean_arel,
by = c("gene_name" = "gene_name")) %>%
mutate(arel_bins = cut(final_arel, breaks = c(0.9, 1.109, 1.182, 1.277, 2)),
general_complex = ifelse(Complex_type %in% c('AS', 'AD', 'SS', 'SD'),
'HM', 'HET'))
gnomad_struc_flex_new <- inner_join(x = gnomad_struc_flex, y = final_mean_arel,
by = c("gene_name" = "gene_name")) %>%
mutate(arel_bins = cut(final_arel, breaks = c(0.9, 1.109, 1.182, 1.277, 2)),
general_complex = ifelse(Complex_type %in% c('AS', 'AD', 'SS', 'SD'),
'HM', 'HET'))
# Group by gene_name, Arel, HM/HET
summary_clinvar_struc_flex <- clinvar_struc_flex_new %>%
group_by(gene_name, arel_bins, general_complex) %>%
tally()
summary_gnomad_struc_flex <- gnomad_struc_flex_new %>%
group_by(gene_name, arel_bins, general_complex) %>%
tally()
arel_hm_het <- full_join(x = summary_clinvar_struc_flex, y = summary_gnomad_struc_flex,
by = c("gene_name" = "gene_name", "arel_bins" = "arel_bins", "general_complex" = "general_complex")) %>%
mutate(n.x = ifelse(is.na(n.x), 0, n.x), n.y = ifelse(is.na(n.y), 0, n.y)) %>%
mutate(total = n.x + n.y)
colnames(arel_hm_het) <- c("gene_name", "arel_bins", "general_complex", "n", "gnomad", "total")
arel_hm_het_filter <- arel_hm_het %>% ungroup() %>%
select(gene_name, arel_bins, general_complex, total)
arel_hm_het_filter <- arel_hm_het %>% ungroup() %>%
select(gene_name, arel_bins, general_complex, total) %>%
spread(key = general_complex, value = total) %>%
mutate(HET = ifelse(is.na(HET), 0, HET), HM = ifelse(is.na(HM), 0, HM)) %>%
filter(HET > 0, HM > 0)
arel_hm_het_filter <- arel_hm_het %>% ungroup() %>%
select(gene_name, arel_bins, general_complex, total)
View(arel_hm_het_filter)
taable(arel_hm_het_filter$general_complex)
table(arel_hm_het_filter$general_complex)
exp(-6.4)
?exp
10^(-6.4)
10^(-7.5)
0.0001/239.311
0.0001/(239.311*6)
a = 6.96e-08
a
b = 3.98e-7
b
a/(a+b)
2363+428
66741+428
# Load libraries
library(ggplot2)
library(cowplot)
library(ggpubr)
library(tidyverse)
library(magrittr)
library(Cairo)
# oxyR_new
working_directory <- '/media/axelle/Angel_backup/Dropbox/Hiver2019/iGEM/Viral_toeholds/oxyR_toeholds_2019-09-23/'
setwd(working_directory)
toehold_results <- read_delim('all_toeholds_results.txt', delim = '\t')
output_folder <- paste(working_directory, 'Figures', sep = '/')
if(!(dir.exists(output_folder))){
dir.create(output_folder)
}
# Get the number of total candidate toeholds
subfolders <- list.dirs(path = '.', full.names = F, recursive = F)
subfolders <- subfolders[!(subfolders == 'Figures')]
total_toeholds <- length(subfolders)
# Count the number of failed toeholds
stop_codons <- total_toeholds - nrow(toehold_results)
# Remove NAs
toehold_results_noNA <- toehold_results %>% filter(!(is.na(Binding_energy_toehold_mRNA)),
!(is.na(Percentage_correct_matches)),
!(is.na(Binding_energy_mRNA)))
# Let's see histograms for the distributions of binding energy,
# percentage of correct matches, and the number of accessible nucleotides in the target
hist(toehold_results_noNA$Binding_energy_toehold_mRNA, xlim = c(-380, -300))
abline(v = toehold_results_noNA$Binding_energy_mRNA[1], col = 'red')
p_hist_non_paired <- toehold_results_noNA %>%
ggplot(aes(x = `Non paired count`)) +
geom_bar() + ylab('Number of toeholds') + xlab('Unpaired count')
p_hist_non_paired
# Looks pretty good, with most of the toeholds getting above 75% of the matches
hist(toehold_results_noNA$Percentage_correct_matches, breaks = 30)
p_correct_matches <- toehold_results_noNA %>%
ggplot(aes(x = Percentage_correct_matches)) +
geom_histogram() +
xlab('Percentage of correct matches') +
ylab('Number of toeholds')
p_correct_matches
# Count the number of toeholds that get 100% matches
sum(toehold_results_noNA$Percentage_correct_matches == 100)
# Check if there is a correlation between the number of unpaired bases, binding energy,
# and the number of correct matches
toehold_results_noNA %>%
select(`Non paired count`, Binding_energy_toehold_mRNA, Percentage_correct_matches, `GC content`) %>%
cor()
p <- toehold_results_noNA %>%
ggplot(aes(x = as.factor(`Non paired count`), y = Percentage_correct_matches)) +
geom_boxplot(outlier.shape = NA) + geom_jitter(alpha = 0.2) +
xlab('Non paired count') + ylab('Percentage of correct matches')
p
# Add a column with the sum of the individual binding energies of the toehold and the mRNA
toehold_results_noNA %<>% mutate(diff_energy = Binding_energy_toehold_mRNA - (Binding_energy_toehold + Binding_energy_mRNA))
# Check if there is a correlation with that difference
toehold_results_noNA %>%
select(`Non paired count`, diff_energy, Percentage_correct_matches, `GC content`) %>%
cor()
# Checking how the difference of free energy between the bound and unbound states changes with
# the number of accessible bases
p2 <- toehold_results_noNA %>%
ggplot(aes(x = as.factor(`Non paired count`), y = diff_energy)) +
geom_boxplot(outlier.shape = NA) + geom_jitter(alpha = 0.2) +
xlab('Non paired count') + ylab('ΔG_bound - ΔG_unbound')
p2
# Checking how the free energy of the bound state changes with
# the number of accessible bases
p3 <- toehold_results_noNA %>%
ggplot(aes(x = as.factor(`Non paired count`), y = Binding_energy_toehold_mRNA)) +
geom_boxplot(outlier.shape = NA) + geom_jitter(alpha = 0.2) +
xlab('Non paired count') + ylab('ΔG_bound')
p3
toehold_results_noNA_new <- toehold_results_noNA %>%
mutate(Bound = Binding_energy_toehold_mRNA,
Unbound = Binding_energy_toehold + Binding_energy_mRNA) %>%
select(Index, Bound, Unbound) %>%
gather(key = Type, value = ddG, -Index)
p4 <- toehold_results_noNA_new %>%
ggplot(aes(x = ddG, fill = Type)) +
geom_histogram() +
xlab('Free energy (kcal/mol)') + ylab('Number of toeholds') +
theme(legend.title = element_blank())
p4
# Alternative version of p4 using a boxplot
p4.2 <- ggpaired(data = toehold_results_noNA %>%
mutate(Unbound_ddG = Binding_energy_toehold + Binding_energy_mRNA) %>%
select(Binding_energy_toehold_mRNA, Unbound_ddG),
cond1 = 'Binding_energy_toehold_mRNA', cond2 = 'Unbound_ddG', fill = 'condition')
p4.2
p4.3 <- toehold_results_noNA_new %>%
ggplot(aes(x = Type, y = ddG)) +
geom_point() +
geom_line(aes(group = Index), alpha = 0.7) +
geom_boxplot(outlier.color = NA, alpha = 0.4)
p4.3
p5 <- toehold_results_noNA %>%
ggplot(aes(x = diff_energy)) +
geom_histogram(fill = '#76aa94') +
xlab('Free energy difference (kcal/mol)') + ylab('Number of toeholds') +
geom_vline(xintercept = 0, colour = 'red') +
theme(plot.background = element_rect('transparent'),
axis.title = element_text(face = 'bold', size = 20),
axis.text = element_text(size = 18))
p5
toehold_results_new <- toehold_results %>%
mutate(Category = ifelse(Percentage_correct_matches == 100, 'Perfect match',
'Imperfect match')) %>%
group_by(Category) %>%
summarise(count = n()) %>%
add_row(Category = 'Stop codon', count = stop_codons) %>%
mutate(Percentage = round(count * 100/ sum(count))) %>%
rowwise() %>%
mutate(Percentage = paste(toString(Percentage), '%', sep = '')) %>%
mutate(Category = factor(Category, levels = c('Stop codon', 'Imperfect match', 'Perfect match')))
p6 <- toehold_results_new %>%
ggplot(aes(x = Category, y = count, fill = Category)) +
geom_bar(stat = 'identity') +
scale_fill_manual(values = c('#60a58a', '#9bdec0', '#76aa94')) +
geom_text(aes(label = Percentage, y = count/2, x = Category, fontface = 'bold'),
colour = 'white', size = 10) +
theme(legend.position = 'none', plot.background = element_rect(fill = 'transparent', colour = NA),
axis.line.x = element_line(colour = 'white'),
axis.line.y = element_line(colour = 'white'),
axis.ticks.x = element_line(colour = 'white'),
axis.ticks.y = element_line(colour = 'white'),
axis.text = element_text(colour = 'white', size = 18),
axis.title = element_text(colour = 'white', size = 20, face = 'bold')
) +
ylab('Number of toeholds')
p6
p6 <- toehold_results_new %>%
ggplot(aes(x = Category, y = count, fill = Category)) +
geom_bar(stat = 'identity') +
scale_fill_manual(values = c('#60a58a', '#9bdec0', '#76aa94')) +
geom_text(aes(label = Percentage, y = count/2, x = Category, fontface = 'bold'),
colour = 'white', size = 10) +
theme(legend.position = 'none', plot.background = element_rect(fill = 'transparent', colour = NA),
axis.line.x = element_line(colour = 'black'),
axis.line.y = element_line(colour = 'black'),
axis.ticks.x = element_line(colour = 'black'),
axis.ticks.y = element_line(colour = 'black'),
axis.text = element_text(colour = 'black', size = 18),
axis.title = element_text(colour = 'black', size = 20, face = 'bold')
) +
ylab('Number of toeholds')
p6
plot_poster <- plot_grid(p5, p6, labels = c('A', 'B'), label_size = 24)
plot_poster
ggsave(filename = paste(output_folder, '8.3.figure_poster.pdf', sep = '/'),
width = 14, height = 7, dpi = 500, device = cairo_pdf(), plot = plot_poster,
bg = 'transparent')
