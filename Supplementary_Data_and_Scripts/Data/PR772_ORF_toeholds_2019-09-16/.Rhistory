mutate(Category = ifelse(Percentage_correct_matches == 100, 'Perfect match',
'Imperfect match')) %>%
group_by(Category) %>%
summarise(count = n()) %>%
add_row(Category = 'Stop codon', count = stop_codons) %>%
mutate(Percentage = round(count * 100/ sum(count))) %>%
rowwise() %>%
mutate(Percentage = paste(toString(Percentage), '%', sep = '')) %>%
mutate(Category = factor(Category, levels = c('Stop codon', 'Imperfect match', 'Perfect match')))
p6 <- toehold_results_new %>%
ggplot(aes(x = Category, y = count, fill = Category)) +
geom_bar(stat = 'identity') +
scale_fill_manual(values = c('#60a58a', '#9bdec0', '#76aa94')) +
geom_text(aes(label = Percentage, y = count/2, x = Category, fontface = 'bold'),
colour = 'white', size = 10) +
theme(legend.position = 'none', plot.background = element_rect(fill = 'transparent', colour = NA),
axis.line.x = element_line(colour = 'white'),
axis.line.y = element_line(colour = 'white'),
axis.ticks.x = element_line(colour = 'white'),
axis.ticks.y = element_line(colour = 'white'),
axis.text = element_text(colour = 'white', size = 18),
axis.title = element_text(colour = 'white', size = 20, face = 'bold')
) +
ylab('Number of toeholds')
p6
ggsave(filename = paste(output_folder, '8.toehold_success.png', sep = '/'),
width = 10, height = 7, dpi = 500, device = 'png', plot = p6,
bg = 'transparent')
p7 <- toehold_results_new %>%
ggplot(aes(x = '', y = count, fill = Category)) +
geom_bar(stat = 'identity', width = 1) +
coord_polar("y", start = 0) +
scale_fill_manual(values = c('#ff8080', '#ffd966', '#98e698')) +
theme(axis.line = element_blank(),
axis.ticks = element_blank(),
axis.text.x = element_blank()) +
xlab('') + ylab('Percentage of toeholds') +
# geom_text(aes(label = Percentage, y = count/3 + c(0, cumsum(count)[-length(count)])))
geom_text(aes(label = Percentage), y = c(-30, 195, 416), size = 8)
p7
ggsave(filename = paste(output_folder, '9.toehold_success_pie.png', sep = '/'),
width = 10, height = 7, dpi = 500, device = 'png', plot = p7)
#### Look at the correlation between binding energy and GC content ####
lm_eqn <- function(df){
y <- df$`GC content`
x <- df$`Binding_energy_toehold_mRNA`
m <- lm(y ~ x, df);
eq <- substitute(italic(y) == a + b %.% italic(x)*","~~italic(R)^2~"="~r2,
list(a = format(unname(coef(m)[1]), digits = 2),
b = format(unname(coef(m)[2]), digits = 2),
r2 = format(summary(m)$r.squared, digits = 3)))
as.character(as.expression(eq));
}
p8 <- toehold_results_noNA %>%
ggplot(aes(x = `GC content`, y = Binding_energy_toehold_mRNA)) +
geom_point() +
geom_smooth(method = 'lm') +
annotate(geom = 'text', x = 45, y = -375, label = lm_eqn(toehold_results_noNA),
parse = TRUE, colour = 'black')
p8
p9 <- toehold_results_noNA %>%
ggplot(aes(x = `GC content`, y = Binding_energy_toehold_mRNA - Binding_energy_toehold - Binding_energy_mRNA)) +
geom_point() +
geom_smooth(method = 'lm') +
ylab('dG Bound - dG Unbound')
p9
####################################
####    Results toeholds oxyR   ####
#### This script will help me   ####
#### make some plots to check   ####
#### the toeholds and their     ####
#### success.                   ####
####################################
# Load libraries
library(ggplot2)
library(cowplot)
library(ggpubr)
library(tidyverse)
library(magrittr)
library(Cairo)
# Load the data and prepare an output folder
# oxyR
# working_directory <- '/media/axelle/Angel_backup/Dropbox/Hiver2019/iGEM/Tests_oxyR_new_script_1/'
# oxyR_new
# working_directory <- '/media/axelle/Angel_backup/Dropbox/Hiver2019/iGEM/Viral_toeholds/oxyR_toeholds_2019-09-23/'
# Phi6_CDS
# working_directory <- '/media/axelle/Angel_backup/Dropbox/Hiver2019/iGEM/Viral_toeholds/Phi6_CDS_toeholds_2019-09-16/'
# Phi_CDS_2
working_directory <- '/media/axelle/Angel_backup/Dropbox/Hiver2019/iGEM/Viral_toeholds/Phi6_CDS_2_2_toeholds_new/'
# PR772_ORF
# working_directory <- '/media/axelle/Angel_backup/Dropbox/Hiver2019/iGEM/Viral_toeholds/PR772_ORF_toeholds_2019-09-16/'
setwd(working_directory)
toehold_results <- read_delim('all_toeholds_results.txt', delim = '\t')
output_folder <- paste(working_directory, 'Figures', sep = '/')
#### Stuff I am not using ####
# oxyR
# toehold_results <- read_delim('/media/axelle/Angel_backup/Dropbox/Hiver2019/iGEM/Tests_oxyR_new_script_1/all_toeholds_results.txt', delim = '\t')
# output_folder <- '/media/axelle/Angel_backup/Dropbox/Hiver2019/iGEM/Tests_oxyR_new_script_1/Figures'
# Phi6_CDS
# toehold_results <- read_delim('/media/axelle/Angel_backup/Dropbox/Hiver2019/iGEM/Viral_toeholds/Phi6_CDS_toeholds_2019-09-16/all_toeholds_results.txt', delim = '\t')
# output_folder <- '/media/axelle/Angel_backup/Dropbox/Hiver2019/iGEM/Viral_toeholds/Phi6_CDS_toeholds_2019-09-16/Figures'
# Phi6_CDS_2
# toehold_results <- read_delim('/media/axelle/Angel_backup/Dropbox/Hiver2019/iGEM/Viral_toeholds/Phi6_CDS_2_2_toeholds_new/all_toeholds_results.txt', delim = '\t')
# output_folder <- '/media/axelle/Angel_backup/Dropbox/Hiver2019/iGEM/Viral_toeholds/Phi6_CDS_2_2_toeholds_new/Figures'
# PR772_ORF
# toehold_results <- read_delim('/media/axelle/Angel_backup/Dropbox/Hiver2019/iGEM/Viral_toeholds/PR772_ORF_toeholds_2019-09-16/all_toeholds_results.txt', delim = '\t')
# output_folder <- '/media/axelle/Angel_backup/Dropbox/Hiver2019/iGEM/Viral_toeholds/PR772_ORF_toeholds_2019-09-16/Figures'
#### End stuff I am not using ####
if(!(dir.exists(output_folder))){
dir.create(output_folder)
}
# Get the number of total candidate toeholds
subfolders <- list.dirs(path = '.', full.names = F, recursive = F)
subfolders <- subfolders[!(subfolders == 'Figures')]
total_toeholds <- length(subfolders)
# Count the number of failed toeholds
stop_codons <- total_toeholds - nrow(toehold_results)
# Remove NAs
toehold_results_noNA <- toehold_results %>% filter(!(is.na(Binding_energy_toehold_mRNA)),
!(is.na(Percentage_correct_matches)),
!(is.na(Binding_energy_mRNA)))
# Let's see histograms for the distributions of binding energy,
# percentage of correct matches, and the number of accessible nucleotides in the target
hist(toehold_results_noNA$Binding_energy_toehold_mRNA, xlim = c(-380, -300))
abline(v = toehold_results_noNA$Binding_energy_mRNA[1], col = 'red')
p_hist_non_paired <- toehold_results_noNA %>%
ggplot(aes(x = `Non paired count`)) +
geom_bar() + ylab('Number of toeholds') + xlab('Unpaired count')
p_hist_non_paired
ggsave(filename = paste(output_folder, '1.Counts_non_paired.png', sep = '/'),
width = 10, height = 7, dpi = 500, device = 'png', plot = p_hist_non_paired)
# Looks pretty good, with most of the toeholds getting above 75% of the matches
hist(toehold_results_noNA$Percentage_correct_matches, breaks = 30)
p_correct_matches <- toehold_results_noNA %>%
ggplot(aes(x = Percentage_correct_matches)) +
geom_histogram() +
xlab('Percentage of correct matches') +
ylab('Number of toeholds')
p_correct_matches
ggsave(filename = paste(output_folder, '2.Counts_correct_matches.png', sep = '/'),
width = 10, height = 7, dpi = 500, device = 'png', plot = p_correct_matches)
# Count the number of toeholds that get 100% matches
sum(toehold_results_noNA$Percentage_correct_matches == 100)
# Check if there is a correlation between the number of unpaired bases, binding energy,
# and the number of correct matches
toehold_results_noNA %>%
select(`Non paired count`, Binding_energy_toehold_mRNA, Percentage_correct_matches, `GC content`) %>%
cor()
#                             Non paired count Binding_energy_toehold_mRNA Percentage_correct_matches
# Non paired count                   1.0000000                   0.3274029                 -0.2047476
# Binding_energy_toehold_mRNA        0.3274029                   1.0000000                 -0.1592847
# Percentage_correct_matches        -0.2047476                  -0.1592847                  1.0000000
p <- toehold_results_noNA %>%
ggplot(aes(x = as.factor(`Non paired count`), y = Percentage_correct_matches)) +
geom_boxplot(outlier.shape = NA) + geom_jitter(alpha = 0.2) +
xlab('Non paired count') + ylab('Percentage of correct matches')
p
ggsave(filename = paste(output_folder, '3.Correct_matches_non_paired.png', sep = '/'),
width = 10, height = 7, dpi = 500, device = 'png', plot = p)
# Add a column with the sum of the individual binding energies of the toehold and the mRNA
toehold_results_noNA %<>% mutate(diff_energy = Binding_energy_toehold_mRNA - (Binding_energy_toehold + Binding_energy_mRNA))
# Check if there is a correlation with that difference
toehold_results_noNA %>%
select(`Non paired count`, diff_energy, Percentage_correct_matches, `GC content`) %>%
cor()
#                            Non paired count diff_energy Percentage_correct_matches
# Non paired count                  1.0000000   0.1833721                 -0.2047476
# diff_energy                       0.1833721   1.0000000                 -0.2146187
# Percentage_correct_matches       -0.2047476  -0.2146187                  1.0000000
# Checking how the difference of free energy between the bound and unbound states changes with
# the number of accessible bases
p2 <- toehold_results_noNA %>%
ggplot(aes(x = as.factor(`Non paired count`), y = diff_energy)) +
geom_boxplot(outlier.shape = NA) + geom_jitter(alpha = 0.2) +
xlab('Non paired count') + ylab('ΔG_bound - ΔG_unbound')
p2
ggsave(filename = paste(output_folder, '4.ddG_binding_non_paired.png', sep = '/'),
width = 10, height = 7, dpi = 500, device = 'png', plot = p2)
# Checking how the free energy of the bound state changes with
# the number of accessible bases
p3 <- toehold_results_noNA %>%
ggplot(aes(x = as.factor(`Non paired count`), y = Binding_energy_toehold_mRNA)) +
geom_boxplot(outlier.shape = NA) + geom_jitter(alpha = 0.2) +
xlab('Non paired count') + ylab('ΔG_bound')
p3
ggsave(filename = paste(output_folder, '5.dG_binding_non_paired.png', sep = '/'),
width = 10, height = 7, dpi = 500, device = 'png', plot = p3)
#### Let's show a distribution of the bound and unbound free energies ####
toehold_results_noNA_new <- toehold_results_noNA %>%
mutate(Bound = Binding_energy_toehold_mRNA,
Unbound = Binding_energy_toehold + Binding_energy_mRNA) %>%
select(Index, Bound, Unbound) %>%
gather(key = Type, value = ddG, -Index)
p4 <- toehold_results_noNA_new %>%
ggplot(aes(x = ddG, fill = Type)) +
geom_histogram() +
xlab('Free energy (kcal/mol)') + ylab('Number of toeholds') +
theme(legend.title = element_blank())
p4
ggsave(filename = paste(output_folder, '6.dG_distributions.png', sep = '/'),
width = 10, height = 7, dpi = 500, device = 'png', plot = p4)
# Alternative version of p4 using a boxplot
p4.2 <- ggpaired(data = toehold_results_noNA %>%
mutate(Unbound_ddG = Binding_energy_toehold + Binding_energy_mRNA) %>%
select(Binding_energy_toehold_mRNA, Unbound_ddG),
cond1 = 'Binding_energy_toehold_mRNA', cond2 = 'Unbound_ddG', fill = 'condition')
p4.2
p4.3 <- toehold_results_noNA_new %>%
ggplot(aes(x = Type, y = ddG)) +
geom_point() +
geom_line(aes(group = Index), alpha = 0.7) +
geom_boxplot(outlier.color = NA, alpha = 0.4)
p4.3
p5 <- toehold_results_noNA %>%
ggplot(aes(x = diff_energy)) +
geom_histogram() +
xlab('Free energy difference (kcal/mol)') + ylab('Number of toeholds') +
geom_vline(xintercept = 0, colour = 'red')
p5
ggsave(filename = paste(output_folder, '7.ddG_distribution.png', sep = '/'),
width = 10, height = 7, dpi = 500, device = 'png', plot = p5)
#### An alternative version of the distribution of binding success rates ####
toehold_results_new <- toehold_results %>%
mutate(Category = ifelse(Percentage_correct_matches == 100, 'Perfect match',
'Imperfect match')) %>%
group_by(Category) %>%
summarise(count = n()) %>%
add_row(Category = 'Stop codon', count = stop_codons) %>%
mutate(Percentage = round(count * 100/ sum(count))) %>%
rowwise() %>%
mutate(Percentage = paste(toString(Percentage), '%', sep = '')) %>%
mutate(Category = factor(Category, levels = c('Stop codon', 'Imperfect match', 'Perfect match')))
p6 <- toehold_results_new %>%
ggplot(aes(x = Category, y = count, fill = Category)) +
geom_bar(stat = 'identity') +
scale_fill_manual(values = c('#60a58a', '#9bdec0', '#76aa94')) +
geom_text(aes(label = Percentage, y = count/2, x = Category, fontface = 'bold'),
colour = 'white', size = 10) +
theme(legend.position = 'none', plot.background = element_rect(fill = 'transparent', colour = NA),
axis.line.x = element_line(colour = 'white'),
axis.line.y = element_line(colour = 'white'),
axis.ticks.x = element_line(colour = 'white'),
axis.ticks.y = element_line(colour = 'white'),
axis.text = element_text(colour = 'white', size = 18),
axis.title = element_text(colour = 'white', size = 20, face = 'bold')
) +
ylab('Number of toeholds')
p6
ggsave(filename = paste(output_folder, '8.toehold_success.png', sep = '/'),
width = 10, height = 7, dpi = 500, device = 'png', plot = p6,
bg = 'transparent')
p7 <- toehold_results_new %>%
ggplot(aes(x = '', y = count, fill = Category)) +
geom_bar(stat = 'identity', width = 1) +
coord_polar("y", start = 0) +
scale_fill_manual(values = c('#ff8080', '#ffd966', '#98e698')) +
theme(axis.line = element_blank(),
axis.ticks = element_blank(),
axis.text.x = element_blank()) +
xlab('') + ylab('Percentage of toeholds') +
# geom_text(aes(label = Percentage, y = count/3 + c(0, cumsum(count)[-length(count)])))
geom_text(aes(label = Percentage), y = c(-30, 195, 416), size = 8)
p7
ggsave(filename = paste(output_folder, '9.toehold_success_pie.png', sep = '/'),
width = 10, height = 7, dpi = 500, device = 'png', plot = p7)
#### Look at the correlation between binding energy and GC content ####
lm_eqn <- function(df){
y <- df$`GC content`
x <- df$`Binding_energy_toehold_mRNA`
m <- lm(y ~ x, df);
eq <- substitute(italic(y) == a + b %.% italic(x)*","~~italic(R)^2~"="~r2,
list(a = format(unname(coef(m)[1]), digits = 2),
b = format(unname(coef(m)[2]), digits = 2),
r2 = format(summary(m)$r.squared, digits = 3)))
as.character(as.expression(eq));
}
p8 <- toehold_results_noNA %>%
ggplot(aes(x = `GC content`, y = Binding_energy_toehold_mRNA)) +
geom_point() +
geom_smooth(method = 'lm') +
annotate(geom = 'text', x = 45, y = -375, label = lm_eqn(toehold_results_noNA),
parse = TRUE, colour = 'black')
p8
p9 <- toehold_results_noNA %>%
ggplot(aes(x = `GC content`, y = Binding_energy_toehold_mRNA - Binding_energy_toehold - Binding_energy_mRNA)) +
geom_point() +
geom_smooth(method = 'lm') +
ylab('dG Bound - dG Unbound')
p9
####################################
####    Results toeholds oxyR   ####
#### This script will help me   ####
#### make some plots to check   ####
#### the toeholds and their     ####
#### success.                   ####
####################################
# Load libraries
library(ggplot2)
library(cowplot)
library(ggpubr)
library(tidyverse)
library(magrittr)
library(Cairo)
# Load the data and prepare an output folder
# oxyR
# working_directory <- '/media/axelle/Angel_backup/Dropbox/Hiver2019/iGEM/Tests_oxyR_new_script_1/'
# oxyR_new
# working_directory <- '/media/axelle/Angel_backup/Dropbox/Hiver2019/iGEM/Viral_toeholds/oxyR_toeholds_2019-09-23/'
# Phi6_CDS
# working_directory <- '/media/axelle/Angel_backup/Dropbox/Hiver2019/iGEM/Viral_toeholds/Phi6_CDS_toeholds_2019-09-16/'
# Phi_CDS_2
# working_directory <- '/media/axelle/Angel_backup/Dropbox/Hiver2019/iGEM/Viral_toeholds/Phi6_CDS_2_2_toeholds_new/'
# PR772_ORF
working_directory <- '/media/axelle/Angel_backup/Dropbox/Hiver2019/iGEM/Viral_toeholds/PR772_ORF_toeholds_2019-09-16/'
setwd(working_directory)
toehold_results <- read_delim('all_toeholds_results.txt', delim = '\t')
output_folder <- paste(working_directory, 'Figures', sep = '/')
#### Stuff I am not using ####
# oxyR
# toehold_results <- read_delim('/media/axelle/Angel_backup/Dropbox/Hiver2019/iGEM/Tests_oxyR_new_script_1/all_toeholds_results.txt', delim = '\t')
# output_folder <- '/media/axelle/Angel_backup/Dropbox/Hiver2019/iGEM/Tests_oxyR_new_script_1/Figures'
# Phi6_CDS
# toehold_results <- read_delim('/media/axelle/Angel_backup/Dropbox/Hiver2019/iGEM/Viral_toeholds/Phi6_CDS_toeholds_2019-09-16/all_toeholds_results.txt', delim = '\t')
# output_folder <- '/media/axelle/Angel_backup/Dropbox/Hiver2019/iGEM/Viral_toeholds/Phi6_CDS_toeholds_2019-09-16/Figures'
# Phi6_CDS_2
# toehold_results <- read_delim('/media/axelle/Angel_backup/Dropbox/Hiver2019/iGEM/Viral_toeholds/Phi6_CDS_2_2_toeholds_new/all_toeholds_results.txt', delim = '\t')
# output_folder <- '/media/axelle/Angel_backup/Dropbox/Hiver2019/iGEM/Viral_toeholds/Phi6_CDS_2_2_toeholds_new/Figures'
# PR772_ORF
# toehold_results <- read_delim('/media/axelle/Angel_backup/Dropbox/Hiver2019/iGEM/Viral_toeholds/PR772_ORF_toeholds_2019-09-16/all_toeholds_results.txt', delim = '\t')
# output_folder <- '/media/axelle/Angel_backup/Dropbox/Hiver2019/iGEM/Viral_toeholds/PR772_ORF_toeholds_2019-09-16/Figures'
#### End stuff I am not using ####
if(!(dir.exists(output_folder))){
dir.create(output_folder)
}
# Get the number of total candidate toeholds
subfolders <- list.dirs(path = '.', full.names = F, recursive = F)
subfolders <- subfolders[!(subfolders == 'Figures')]
total_toeholds <- length(subfolders)
# Count the number of failed toeholds
stop_codons <- total_toeholds - nrow(toehold_results)
# Remove NAs
toehold_results_noNA <- toehold_results %>% filter(!(is.na(Binding_energy_toehold_mRNA)),
!(is.na(Percentage_correct_matches)),
!(is.na(Binding_energy_mRNA)))
# Let's see histograms for the distributions of binding energy,
# percentage of correct matches, and the number of accessible nucleotides in the target
hist(toehold_results_noNA$Binding_energy_toehold_mRNA, xlim = c(-380, -300))
abline(v = toehold_results_noNA$Binding_energy_mRNA[1], col = 'red')
p_hist_non_paired <- toehold_results_noNA %>%
ggplot(aes(x = `Non paired count`)) +
geom_bar() + ylab('Number of toeholds') + xlab('Unpaired count')
p_hist_non_paired
ggsave(filename = paste(output_folder, '1.Counts_non_paired.png', sep = '/'),
width = 10, height = 7, dpi = 500, device = 'png', plot = p_hist_non_paired)
# Looks pretty good, with most of the toeholds getting above 75% of the matches
hist(toehold_results_noNA$Percentage_correct_matches, breaks = 30)
p_correct_matches <- toehold_results_noNA %>%
ggplot(aes(x = Percentage_correct_matches)) +
geom_histogram() +
xlab('Percentage of correct matches') +
ylab('Number of toeholds')
p_correct_matches
ggsave(filename = paste(output_folder, '2.Counts_correct_matches.png', sep = '/'),
width = 10, height = 7, dpi = 500, device = 'png', plot = p_correct_matches)
# Count the number of toeholds that get 100% matches
sum(toehold_results_noNA$Percentage_correct_matches == 100)
# Check if there is a correlation between the number of unpaired bases, binding energy,
# and the number of correct matches
toehold_results_noNA %>%
select(`Non paired count`, Binding_energy_toehold_mRNA, Percentage_correct_matches, `GC content`) %>%
cor()
#                             Non paired count Binding_energy_toehold_mRNA Percentage_correct_matches
# Non paired count                   1.0000000                   0.3274029                 -0.2047476
# Binding_energy_toehold_mRNA        0.3274029                   1.0000000                 -0.1592847
# Percentage_correct_matches        -0.2047476                  -0.1592847                  1.0000000
p <- toehold_results_noNA %>%
ggplot(aes(x = as.factor(`Non paired count`), y = Percentage_correct_matches)) +
geom_boxplot(outlier.shape = NA) + geom_jitter(alpha = 0.2) +
xlab('Non paired count') + ylab('Percentage of correct matches')
p
ggsave(filename = paste(output_folder, '3.Correct_matches_non_paired.png', sep = '/'),
width = 10, height = 7, dpi = 500, device = 'png', plot = p)
# Add a column with the sum of the individual binding energies of the toehold and the mRNA
toehold_results_noNA %<>% mutate(diff_energy = Binding_energy_toehold_mRNA - (Binding_energy_toehold + Binding_energy_mRNA))
# Check if there is a correlation with that difference
toehold_results_noNA %>%
select(`Non paired count`, diff_energy, Percentage_correct_matches, `GC content`) %>%
cor()
#                            Non paired count diff_energy Percentage_correct_matches
# Non paired count                  1.0000000   0.1833721                 -0.2047476
# diff_energy                       0.1833721   1.0000000                 -0.2146187
# Percentage_correct_matches       -0.2047476  -0.2146187                  1.0000000
# Checking how the difference of free energy between the bound and unbound states changes with
# the number of accessible bases
p2 <- toehold_results_noNA %>%
ggplot(aes(x = as.factor(`Non paired count`), y = diff_energy)) +
geom_boxplot(outlier.shape = NA) + geom_jitter(alpha = 0.2) +
xlab('Non paired count') + ylab('ΔG_bound - ΔG_unbound')
p2
ggsave(filename = paste(output_folder, '4.ddG_binding_non_paired.png', sep = '/'),
width = 10, height = 7, dpi = 500, device = 'png', plot = p2)
# Checking how the free energy of the bound state changes with
# the number of accessible bases
p3 <- toehold_results_noNA %>%
ggplot(aes(x = as.factor(`Non paired count`), y = Binding_energy_toehold_mRNA)) +
geom_boxplot(outlier.shape = NA) + geom_jitter(alpha = 0.2) +
xlab('Non paired count') + ylab('ΔG_bound')
p3
ggsave(filename = paste(output_folder, '5.dG_binding_non_paired.png', sep = '/'),
width = 10, height = 7, dpi = 500, device = 'png', plot = p3)
#### Let's show a distribution of the bound and unbound free energies ####
toehold_results_noNA_new <- toehold_results_noNA %>%
mutate(Bound = Binding_energy_toehold_mRNA,
Unbound = Binding_energy_toehold + Binding_energy_mRNA) %>%
select(Index, Bound, Unbound) %>%
gather(key = Type, value = ddG, -Index)
p4 <- toehold_results_noNA_new %>%
ggplot(aes(x = ddG, fill = Type)) +
geom_histogram() +
xlab('Free energy (kcal/mol)') + ylab('Number of toeholds') +
theme(legend.title = element_blank())
p4
ggsave(filename = paste(output_folder, '6.dG_distributions.png', sep = '/'),
width = 10, height = 7, dpi = 500, device = 'png', plot = p4)
# Alternative version of p4 using a boxplot
p4.2 <- ggpaired(data = toehold_results_noNA %>%
mutate(Unbound_ddG = Binding_energy_toehold + Binding_energy_mRNA) %>%
select(Binding_energy_toehold_mRNA, Unbound_ddG),
cond1 = 'Binding_energy_toehold_mRNA', cond2 = 'Unbound_ddG', fill = 'condition')
p4.2
p4.3 <- toehold_results_noNA_new %>%
ggplot(aes(x = Type, y = ddG)) +
geom_point() +
geom_line(aes(group = Index), alpha = 0.7) +
geom_boxplot(outlier.color = NA, alpha = 0.4)
p4.3
p5 <- toehold_results_noNA %>%
ggplot(aes(x = diff_energy)) +
geom_histogram() +
xlab('Free energy difference (kcal/mol)') + ylab('Number of toeholds') +
geom_vline(xintercept = 0, colour = 'red')
p5
ggsave(filename = paste(output_folder, '7.ddG_distribution.png', sep = '/'),
width = 10, height = 7, dpi = 500, device = 'png', plot = p5)
#### An alternative version of the distribution of binding success rates ####
toehold_results_new <- toehold_results %>%
mutate(Category = ifelse(Percentage_correct_matches == 100, 'Perfect match',
'Imperfect match')) %>%
group_by(Category) %>%
summarise(count = n()) %>%
add_row(Category = 'Stop codon', count = stop_codons) %>%
mutate(Percentage = round(count * 100/ sum(count))) %>%
rowwise() %>%
mutate(Percentage = paste(toString(Percentage), '%', sep = '')) %>%
mutate(Category = factor(Category, levels = c('Stop codon', 'Imperfect match', 'Perfect match')))
p6 <- toehold_results_new %>%
ggplot(aes(x = Category, y = count, fill = Category)) +
geom_bar(stat = 'identity') +
scale_fill_manual(values = c('#60a58a', '#9bdec0', '#76aa94')) +
geom_text(aes(label = Percentage, y = count/2, x = Category, fontface = 'bold'),
colour = 'white', size = 10) +
theme(legend.position = 'none', plot.background = element_rect(fill = 'transparent', colour = NA),
axis.line.x = element_line(colour = 'white'),
axis.line.y = element_line(colour = 'white'),
axis.ticks.x = element_line(colour = 'white'),
axis.ticks.y = element_line(colour = 'white'),
axis.text = element_text(colour = 'white', size = 18),
axis.title = element_text(colour = 'white', size = 20, face = 'bold')
) +
ylab('Number of toeholds')
p6
ggsave(filename = paste(output_folder, '8.toehold_success.png', sep = '/'),
width = 10, height = 7, dpi = 500, device = 'png', plot = p6,
bg = 'transparent')
p7 <- toehold_results_new %>%
ggplot(aes(x = '', y = count, fill = Category)) +
geom_bar(stat = 'identity', width = 1) +
coord_polar("y", start = 0) +
scale_fill_manual(values = c('#ff8080', '#ffd966', '#98e698')) +
theme(axis.line = element_blank(),
axis.ticks = element_blank(),
axis.text.x = element_blank()) +
xlab('') + ylab('Percentage of toeholds') +
# geom_text(aes(label = Percentage, y = count/3 + c(0, cumsum(count)[-length(count)])))
geom_text(aes(label = Percentage), y = c(-30, 195, 416), size = 8)
p7
ggsave(filename = paste(output_folder, '9.toehold_success_pie.png', sep = '/'),
width = 10, height = 7, dpi = 500, device = 'png', plot = p7)
#### Look at the correlation between binding energy and GC content ####
lm_eqn <- function(df){
y <- df$`GC content`
x <- df$`Binding_energy_toehold_mRNA`
m <- lm(y ~ x, df);
eq <- substitute(italic(y) == a + b %.% italic(x)*","~~italic(R)^2~"="~r2,
list(a = format(unname(coef(m)[1]), digits = 2),
b = format(unname(coef(m)[2]), digits = 2),
r2 = format(summary(m)$r.squared, digits = 3)))
as.character(as.expression(eq));
}
p8 <- toehold_results_noNA %>%
ggplot(aes(x = `GC content`, y = Binding_energy_toehold_mRNA)) +
geom_point() +
geom_smooth(method = 'lm') +
annotate(geom = 'text', x = 45, y = -375, label = lm_eqn(toehold_results_noNA),
parse = TRUE, colour = 'black')
p8
p9 <- toehold_results_noNA %>%
ggplot(aes(x = `GC content`, y = Binding_energy_toehold_mRNA - Binding_energy_toehold - Binding_energy_mRNA)) +
geom_point() +
geom_smooth(method = 'lm') +
ylab('dG Bound - dG Unbound')
p9
